//
// Generated file, do not edit! Created by opp_msgtool 6.0 from DataAggregationMessage.msg.
//

#ifndef __DATAAGGREGATIONMESSAGE_M_H
#define __DATAAGGREGATIONMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DataAggregationMessage;
/**
 * Class generated from <tt>DataAggregationMessage.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * // DataAggregationMessage.msg
 * message DataAggregationMessage
 * {
 *     int sourceNodeId;  // ID of the source node
 *     int destinationNodeId;  // ID of the destination node
 *     double aggregatedValueNode11;  // Aggregated value from node 11
 *     double aggregatedValueNode12;  // Aggregated value from node 12
 *     double aggregatedValueNode21;  // Aggregated value from node 21
 *     double aggregatedValueNode22;  // Aggregated value from node 22
 *     double aggregatedValueNode31;  // Aggregated value from node 31
 *     double aggregatedValueNode32;  // Aggregated value from node 32    
 * }
 * </pre>
 */
class DataAggregationMessage : public ::omnetpp::cMessage
{
  protected:
    int sourceNodeId = 0;
    int destinationNodeId = 0;
    double aggregatedValueNode11 = 0;
    double aggregatedValueNode12 = 0;
    double aggregatedValueNode21 = 0;
    double aggregatedValueNode22 = 0;
    double aggregatedValueNode31 = 0;
    double aggregatedValueNode32 = 0;

  private:
    void copy(const DataAggregationMessage& other);

  protected:
    bool operator==(const DataAggregationMessage&) = delete;

  public:
    DataAggregationMessage(const char *name=nullptr, short kind=0);
    DataAggregationMessage(const DataAggregationMessage& other);
    virtual ~DataAggregationMessage();
    DataAggregationMessage& operator=(const DataAggregationMessage& other);
    virtual DataAggregationMessage *dup() const override {return new DataAggregationMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceNodeId() const;
    virtual void setSourceNodeId(int sourceNodeId);

    virtual int getDestinationNodeId() const;
    virtual void setDestinationNodeId(int destinationNodeId);

    virtual double getAggregatedValueNode11() const;
    virtual void setAggregatedValueNode11(double aggregatedValueNode11);

    virtual double getAggregatedValueNode12() const;
    virtual void setAggregatedValueNode12(double aggregatedValueNode12);

    virtual double getAggregatedValueNode21() const;
    virtual void setAggregatedValueNode21(double aggregatedValueNode21);

    virtual double getAggregatedValueNode22() const;
    virtual void setAggregatedValueNode22(double aggregatedValueNode22);

    virtual double getAggregatedValueNode31() const;
    virtual void setAggregatedValueNode31(double aggregatedValueNode31);

    virtual double getAggregatedValueNode32() const;
    virtual void setAggregatedValueNode32(double aggregatedValueNode32);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataAggregationMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataAggregationMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DataAggregationMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<DataAggregationMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __DATAAGGREGATIONMESSAGE_M_H

